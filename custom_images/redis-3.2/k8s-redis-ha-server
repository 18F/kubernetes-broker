#!/bin/bash

set -eux

# Bring in the shared functions and variables
. /opt/bin/bootstrap.sh

slave_priority () {
  local no
  no="$(hostname | awk -F- '{print $NF}')"
  readonly no
  local -r priority="$(((no + 1) * 10))"
  echo "slave-priority $priority"
}

# It's okay to fail during failover or other unpredictable states.
# This prevents from making things much worse.
run () {
  cp -p /opt/redis.template.conf /opt/redis.conf
  chown redis /opt/redis.conf

  # Domain name of the Service is also used as the password.
  # In this case, password is just an ID to distinguish this replica set from
  # other ones in the same Kubernetes cluster.
  {
    echo "masterauth $REDIS_PASSWORD";
    echo "requirepass $REDIS_PASSWORD";
    echo "slave-announce-ip $(hostname -i)";
  } >> /opt/redis.conf

  # Replica with smaller number should be the preferred candidate for Master
  # over ones with larger number.
  # This is because replicas with larger number have higher chance of being
  # removed by reducing the number of replica in a StatefulSet.
  slave_priority >> /opt/redis.conf

  # Headless Service allows newly added Redis server to scan all working servers.
  # This enables it to find if it is the first one.
  local servers
  servers="$(server_domains "$service_domain")"
  readonly servers
  local my_host
  my_host="$(hostname -f)"
  readonly my_host

  local master_ip=''

  local only_server=true
  local s
  for s in $servers; do
    # My hostname must be excluded to handle restarts.
    if [ "$s" = "$my_host" ]; then
      continue
    fi

    only_server=false

    local s_ip
    s_ip="$(domain_ip "$s")"

    if [ -z "$s_ip" ]; then
      >&2 echo "Failed to resolve: $s"
      continue
    fi

    local i
    i="$(redis_info "$s_ip")"
    if [ -n "$i" ]; then
      if [ "$(redis_info_role "$i")" = 'master' ]; then
        master_ip="$s_ip"
      fi
    else
      >&2 echo "Unable to get Replication INFO: $s ($s_ip)"
      continue
    fi

  done

  if [ "$only_server" = true ]; then
    # This is an exceptional case: if this is the first server to start in the
    # replica, this must be run as Master.
    # Otherwise the StatefulSet will be unable to start.
    :
  else
    if [ -z "$master_ip" ]; then
      >&2 echo "Unable to start because all servers are slave."
      exit 1
    fi

    # Now the Master server has been found, this server will be launched as
    # the slave of the Master.
    echo "slaveof $master_ip 6379" >> /opt/redis.conf
  fi

  reset_all_sentinels
  exec docker-entrypoint.sh redis-server "$@"
}

run "$@"
