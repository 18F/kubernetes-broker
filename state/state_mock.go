// Automatically generated by MockGen. DO NOT EDIT!
// Source: state/state.go

package state

import (
	gomock "github.com/golang/mock/gomock"
	time "time"
)

// Mock of StateService interface
type MockStateService struct {
	ctrl     *gomock.Controller
	recorder *_MockStateServiceRecorder
}

// Recorder for MockStateService (not exported)
type _MockStateServiceRecorder struct {
	mock *MockStateService
}

func NewMockStateService(ctrl *gomock.Controller) *MockStateService {
	mock := &MockStateService{ctrl: ctrl}
	mock.recorder = &_MockStateServiceRecorder{mock}
	return mock
}

func (_m *MockStateService) EXPECT() *_MockStateServiceRecorder {
	return _m.recorder
}

func (_m *MockStateService) ReportProgress(guid string, state string, err error) {
	_m.ctrl.Call(_m, "ReportProgress", guid, state, err)
}

func (_mr *_MockStateServiceRecorder) ReportProgress(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReportProgress", arg0, arg1, arg2)
}

func (_m *MockStateService) HasProgressRecords(guid string) bool {
	ret := _m.ctrl.Call(_m, "HasProgressRecords", guid)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockStateServiceRecorder) HasProgressRecords(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HasProgressRecords", arg0)
}

func (_m *MockStateService) ReadProgress(guid string) (time.Time, string, error) {
	ret := _m.ctrl.Call(_m, "ReadProgress", guid)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockStateServiceRecorder) ReadProgress(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadProgress", arg0)
}
