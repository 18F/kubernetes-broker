// Automatically generated by MockGen. DO NOT EDIT!
// Source: k8s/k8sfabricator.go

package k8s

import (
	gomock "github.com/golang/mock/gomock"
	catalog "github.com/trustedanalytics/kubernetes-broker/catalog"
	state "github.com/trustedanalytics/kubernetes-broker/state"
	api "k8s.io/kubernetes/pkg/api"
)

// Mock of KubernetesApi interface
type MockKubernetesApi struct {
	ctrl     *gomock.Controller
	recorder *_MockKubernetesApiRecorder
}

// Recorder for MockKubernetesApi (not exported)
type _MockKubernetesApiRecorder struct {
	mock *MockKubernetesApi
}

func NewMockKubernetesApi(ctrl *gomock.Controller) *MockKubernetesApi {
	mock := &MockKubernetesApi{ctrl: ctrl}
	mock.recorder = &_MockKubernetesApiRecorder{mock}
	return mock
}

func (_m *MockKubernetesApi) EXPECT() *_MockKubernetesApiRecorder {
	return _m.recorder
}

func (_m *MockKubernetesApi) FabricateService(creds K8sClusterCredential, space string, cf_service_id string, parameters string, ss state.StateService, component *catalog.KubernetesComponent) (FabricateResult, error) {
	ret := _m.ctrl.Call(_m, "FabricateService", creds, space, cf_service_id, parameters, ss, component)
	ret0, _ := ret[0].(FabricateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKubernetesApiRecorder) FabricateService(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FabricateService", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockKubernetesApi) CheckKubernetesServiceHealthByServiceInstanceId(creds K8sClusterCredential, space string, instance_id string) (bool, error) {
	ret := _m.ctrl.Call(_m, "CheckKubernetesServiceHealthByServiceInstanceId", creds, space, instance_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKubernetesApiRecorder) CheckKubernetesServiceHealthByServiceInstanceId(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckKubernetesServiceHealthByServiceInstanceId", arg0, arg1, arg2)
}

func (_m *MockKubernetesApi) DeleteAllByServiceId(creds K8sClusterCredential, space string, service_id string) error {
	ret := _m.ctrl.Call(_m, "DeleteAllByServiceId", creds, space, service_id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKubernetesApiRecorder) DeleteAllByServiceId(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAllByServiceId", arg0, arg1, arg2)
}

func (_m *MockKubernetesApi) DeleteAllPersistentVolumes(creds K8sClusterCredential) error {
	ret := _m.ctrl.Call(_m, "DeleteAllPersistentVolumes", creds)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKubernetesApiRecorder) DeleteAllPersistentVolumes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAllPersistentVolumes", arg0)
}

func (_m *MockKubernetesApi) GetAllPodsEnvsByServiceId(creds K8sClusterCredential, space string, service_id string) ([]PodEnvs, error) {
	ret := _m.ctrl.Call(_m, "GetAllPodsEnvsByServiceId", creds, space, service_id)
	ret0, _ := ret[0].([]PodEnvs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKubernetesApiRecorder) GetAllPodsEnvsByServiceId(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAllPodsEnvsByServiceId", arg0, arg1, arg2)
}

func (_m *MockKubernetesApi) GetServiceVisibility(creds K8sClusterCredential, org string, space string, service_id string) ([]K8sServiceInfo, error) {
	ret := _m.ctrl.Call(_m, "GetServiceVisibility", creds, org, space, service_id)
	ret0, _ := ret[0].([]K8sServiceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKubernetesApiRecorder) GetServiceVisibility(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetServiceVisibility", arg0, arg1, arg2, arg3)
}

func (_m *MockKubernetesApi) GetServicesVisibility(creds K8sClusterCredential, org string, space string) ([]K8sServiceInfo, error) {
	ret := _m.ctrl.Call(_m, "GetServicesVisibility", creds, org, space)
	ret0, _ := ret[0].([]K8sServiceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKubernetesApiRecorder) GetServicesVisibility(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetServicesVisibility", arg0, arg1, arg2)
}

func (_m *MockKubernetesApi) GetServiceCredentials(creds K8sClusterCredential, space string, service_id string) ([]ServiceCredential, error) {
	ret := _m.ctrl.Call(_m, "GetServiceCredentials", creds, space, service_id)
	ret0, _ := ret[0].([]ServiceCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKubernetesApiRecorder) GetServiceCredentials(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetServiceCredentials", arg0, arg1, arg2)
}

func (_m *MockKubernetesApi) GetServices(creds K8sClusterCredential, org string) ([]api.Service, error) {
	ret := _m.ctrl.Call(_m, "GetServices", creds, org)
	ret0, _ := ret[0].([]api.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKubernetesApiRecorder) GetServices(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetServices", arg0, arg1)
}

func (_m *MockKubernetesApi) GetQuota(creds K8sClusterCredential, space string) (*api.ResourceQuotaList, error) {
	ret := _m.ctrl.Call(_m, "GetQuota", creds, space)
	ret0, _ := ret[0].(*api.ResourceQuotaList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKubernetesApiRecorder) GetQuota(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetQuota", arg0, arg1)
}

func (_m *MockKubernetesApi) GetClusterWorkers(creds K8sClusterCredential) ([]string, error) {
	ret := _m.ctrl.Call(_m, "GetClusterWorkers", creds)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKubernetesApiRecorder) GetClusterWorkers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetClusterWorkers", arg0)
}

func (_m *MockKubernetesApi) GetPodsStateByServiceId(creds K8sClusterCredential, service_id string) ([]PodStatus, error) {
	ret := _m.ctrl.Call(_m, "GetPodsStateByServiceId", creds, service_id)
	ret0, _ := ret[0].([]PodStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKubernetesApiRecorder) GetPodsStateByServiceId(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPodsStateByServiceId", arg0, arg1)
}

func (_m *MockKubernetesApi) GetPodsStateForAllServices(creds K8sClusterCredential) (map[string][]PodStatus, error) {
	ret := _m.ctrl.Call(_m, "GetPodsStateForAllServices", creds)
	ret0, _ := ret[0].(map[string][]PodStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKubernetesApiRecorder) GetPodsStateForAllServices(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPodsStateForAllServices", arg0)
}

func (_m *MockKubernetesApi) SetServicePublicVisibilityByServiceId(creds K8sClusterCredential, org string, space string, service_id string, shouldBePublic bool) ([]K8sServiceInfo, error) {
	ret := _m.ctrl.Call(_m, "SetServicePublicVisibilityByServiceId", creds, org, space, service_id, shouldBePublic)
	ret0, _ := ret[0].([]K8sServiceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKubernetesApiRecorder) SetServicePublicVisibilityByServiceId(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetServicePublicVisibilityByServiceId", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockKubernetesApi) ListReplicationControllers(creds K8sClusterCredential, space string) (*api.ReplicationControllerList, error) {
	ret := _m.ctrl.Call(_m, "ListReplicationControllers", creds, space)
	ret0, _ := ret[0].(*api.ReplicationControllerList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKubernetesApiRecorder) ListReplicationControllers(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListReplicationControllers", arg0, arg1)
}

func (_m *MockKubernetesApi) GetSecret(creds K8sClusterCredential, key string) (*api.Secret, error) {
	ret := _m.ctrl.Call(_m, "GetSecret", creds, key)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKubernetesApiRecorder) GetSecret(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSecret", arg0, arg1)
}

func (_m *MockKubernetesApi) CreateSecret(creds K8sClusterCredential, secret api.Secret) error {
	ret := _m.ctrl.Call(_m, "CreateSecret", creds, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKubernetesApiRecorder) CreateSecret(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSecret", arg0, arg1)
}

func (_m *MockKubernetesApi) DeleteSecret(creds K8sClusterCredential, key string) error {
	ret := _m.ctrl.Call(_m, "DeleteSecret", creds, key)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKubernetesApiRecorder) DeleteSecret(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSecret", arg0, arg1)
}

func (_m *MockKubernetesApi) UpdateSecret(creds K8sClusterCredential, secret api.Secret) error {
	ret := _m.ctrl.Call(_m, "UpdateSecret", creds, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKubernetesApiRecorder) UpdateSecret(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSecret", arg0, arg1)
}
